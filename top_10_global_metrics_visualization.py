# -*- coding: utf-8 -*-
"""Top 10 Global Metrics Visualization

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17EPLxq7Zo5eXTOo_W2Ac8whRZ89uPNnq

# **Top 10 countries**
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import matplotlib.pyplot as plt

# Load the CSV file into a Pandas DataFrame
df = pd.read_csv("country_population.csv", header=None, names=['Country', 'Population'])

# Data Cleaning: Remove commas from the population and convert to numeric
df['Population'] = df['Population'].str.replace(',', '').astype(float)

# Select the top N countries for the pie chart (e.g., top 10)
N = 10
top_countries = df.nlargest(N, 'Population')

# Create the pie chart
plt.figure(figsize=(10, 10))  # Adjust figure size for better readability
plt.pie(top_countries['Population'], labels=top_countries['Country'], autopct='%1.1f%%', startangle=140)

# Add a title
plt.title('Top {} Countries by Population'.format(N))

# Ensure the circle's proportion
plt.axis('equal')

# Show the plot
plt.show()

"""### **234 Countries** [Countries in the world by population (2025)](https://https://www.worldometers.info/world-population/population-by-country/) I referred to the data from here👈"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Load the CSV file into a Pandas DataFrame
df = pd.read_csv("country_population.csv", header=None, names=['Country', 'Population'])

# Data Cleaning: Remove commas from the population and convert to numeric
df['Population'] = df['Population'].str.replace(',', '').astype(float)

# Filter out very small populations to avoid clutter
df = df[df['Population'] > 1000000]  # Adjust threshold as needed

# Create the pie chart
plt.figure(figsize=(16, 16))  # Adjust figure size for better readability

# Create colors array
num_countries = len(df['Country'])
colors = plt.cm.tab20(np.linspace(0, 1, num_countries))

plt.pie(df['Population'], labels=df['Country'], autopct='%1.1f%%', startangle=140, colors=colors, textprops={'fontsize': 8})

# Add a title
plt.title('Population Distribution by Country (Over 1 Million)', fontsize=16)

# Ensure the circle's proportion
plt.axis('equal')

# Add a legend
plt.legend(title="Countries", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))

# Show the plot
plt.tight_layout()
plt.show()

"""# ***overloaded data***😶‍🌫️🧐"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the CSV file into a Pandas DataFrame
df = pd.read_csv("country_population.csv", header=None, names=['Country', 'Population'])

# Data Cleaning: Remove commas from the population and convert to numeric
df['Population'] = df['Population'].str.replace(',', '').astype(float)

# Create the pie chart
plt.figure(figsize=(12, 12))  # Adjust figure size for better readability
plt.pie(df['Population'], labels=df['Country'], autopct='%1.1f%%', startangle=140)

# Add a title
plt.title('All Countries by Population')

# Ensure the circle's proportion
plt.axis('equal')

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Load the CSV file into a Pandas DataFrame
df = pd.read_csv("country_population.csv", header=None, names=['Country', 'Population'])

# Data Cleaning: Remove commas from the population and convert to numeric
df['Population'] = df['Population'].str.replace(',', '').astype(float)

# Select a few countries (e.g., top 7)
N = 7
top_countries = df.nlargest(N, 'Population')

# Explode the largest slice
explode = [0.1] + [0] * (N - 1)

# Create the pie chart
plt.figure(figsize=(12, 12))

# Colors
colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6', '#808080']

plt.pie(top_countries['Population'],
        labels=top_countries['Country'],
        autopct='%1.1f%%',
        startangle=140,
        explode=explode,
        shadow=True,
        colors=colors,
        wedgeprops={'linewidth': 1, 'edgecolor': 'black'})  # Add black edges

# Add a title
plt.title(f'Top {N} Most Populous Countries', fontsize=16)

# Ensure the circle's proportion
plt.axis('equal')

# Add a legend
plt.legend(title="Countries", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))

# Improve layout
plt.tight_layout()

# Show the plot
plt.show()

"""TOP 50 -***Easy on the eyes***"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Load the CSV file into a Pandas DataFrame
df = pd.read_csv("country_population.csv", header=None, names=['Country', 'Population'])

# Data Cleaning: Remove commas from the population and convert to numeric
df['Population'] = df['Population'].str.replace(',', '').astype(float)

# Select the top N countries
N = 50
top_countries = df.nlargest(N, 'Population')

# Create the pie chart
plt.figure(figsize=(20, 20))  # Adjust figure size

# Use a visually appealing colormap
colors = plt.cm.get_cmap('tab20', N).colors

plt.pie(top_countries['Population'],
        labels=top_countries['Country'],
        autopct='%1.1f%%',
        startangle=140,
        colors=colors,
        wedgeprops={'linewidth': 0.5, 'edgecolor': 'black'},
        textprops={'fontsize': 9})

# Add a title
plt.title(f'Top {N} Most Populous Countries', fontsize=18)

# Ensure the circle's proportion
plt.axis('equal')

# Add a legend outside the pie chart
plt.legend(title="Countries", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))

# Adjust layout
plt.tight_layout()

# Show the plot
plt.show()

"""***Tried-Donut Chart***"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Load the CSV file into a Pandas DataFrame
df = pd.read_csv("country_population.csv", header=None, names=['Country', 'Population'])

# Data Cleaning: Remove commas from the population and convert to numeric
df['Population'] = df['Population'].str.replace(',', '').astype(float)

# Sort the DataFrame by population in descending order
df_sorted = df.sort_values(by='Population', ascending=False)

# Select the top N countries to display
N = 15  # Adjust as needed
df_top = df_sorted.head(N).copy() # Make a copy to avoid SettingWithCopyWarning

# Calculate the population of the remaining countries
other_population = df_sorted['Population'][N:].sum()

# Add the "Other" category to the DataFrame
df_top.loc['Other'] = ['Other', other_population]

# Create a donut chart
plt.figure(figsize=(12, 12))

# Colors
colors = plt.cm.viridis(np.linspace(0, 1, len(df_top)))

# Create the pie chart
plt.pie(df_top['Population'],
        labels=df_top['Country'],
        autopct='%1.1f%%',
        startangle=140,
        colors=colors,
        wedgeprops={'linewidth': 1, 'edgecolor': 'white'},
        pctdistance=0.85)

# Add a white circle in the middle to make it a donut chart
centre_circle = plt.Circle((0, 0), 0.70, fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)

# Add a title
plt.title(f'Population Distribution: Top {N} Countries + Other', fontsize=16)

# Ensure the circle's proportion
plt.axis('equal')

# Add a legend outside the pie chart
plt.legend(title="Countries", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))

# Improve layout
plt.tight_layout()

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Load the CSV file into a Pandas DataFrame
df = pd.read_csv("country_population.csv", header=None, names=['Country', 'Population'])

# Data Cleaning: Remove commas from the population and convert to numeric
df['Population'] = df['Population'].str.replace(',', '').astype(float)

# Filter out countries with very small populations to avoid clutter
df = df[df['Population'] > 1000000]  # Adjust threshold as needed

# Sort the DataFrame by population in descending order
df_sorted = df.sort_values(by='Population', ascending=False)

# Select the top N countries
N = 15  # Adjust as needed
df_top = df_sorted.head(N).copy()

# Calculate the population of the remaining countries
other_population = df_sorted['Population'][N:].sum()

# Add the "Other" category to the DataFrame
df_top.loc['Other'] = ['Other', other_population]

# Create the pie chart
plt.figure(figsize=(12, 12))

# Colors
colors = plt.cm.Spectral(np.linspace(0, 1, len(df_top)))

# Explode the largest slice
explode = [0.1] + [0] * (len(df_top) - 1)

# Create the pie chart
plt.pie(df_top['Population'],
        labels=df_top['Country'],
        autopct='%1.1f%%',
        startangle=140,
        explode=explode,
        shadow=True,
        colors=colors,
        wedgeprops={'linewidth': 1, 'edgecolor': 'black'})

# Add a title
plt.title('Global Population Distribution', fontsize=20, fontweight='bold')

# Ensure the circle's proportion
plt.axis('equal')

# Add a legend outside the pie chart
plt.legend(title="Countries", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))

# Improve layout
plt.tight_layout()

# Show the plot
plt.show()

!pip install squarify

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import squarify  # for treemap

# Load the CSV file into a Pandas DataFrame
df = pd.read_csv("country_population.csv", header=None, names=['Country', 'Population'])

# Data Cleaning: Remove commas from the population and convert to numeric
df['Population'] = df['Population'].str.replace(',', '').astype(float)

# Sort the DataFrame by population in descending order
df_sorted = df.sort_values(by='Population', ascending=False)

# Select the top N countries for individual display
N = 12

# Calculate the population of the remaining countries (for the "Other" category)
other_population = df_sorted['Population'][N:].sum()

# Create a new DataFrame for the treemap data
data = df_sorted.head(N).copy() # Make a copy to avoid SettingWithCopyWarning

# Add the "Other" category
data.loc['Other'] = ['Other', other_population]

# Generate a visually appealing color palette
num_categories = len(data)
colors = plt.cm.get_cmap('RdYlGn')(np.linspace(0, 1, num_categories))

# Create the treemap
plt.figure(figsize=(16, 10))
plt.title('Global Population Distribution - Treemap', fontsize=22, fontweight='bold')

# Create squarify plot
squarify.plot(sizes=data['Population'],
              label=data['Country'],
              alpha=0.8,
              color=colors,
              text_kwargs={'fontsize': 10, 'fontweight': 'bold', 'color': 'white'},
              edgecolor="black",
              linewidth=0.7)

# Remove the axis
plt.axis('off')

plt.tight_layout()
plt.show()

